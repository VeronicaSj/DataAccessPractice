/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package classfileej5escriturasecuencialficherosaccdatveronicasancheznb;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author veron
 */
public class MainView extends javax.swing.JFrame {
    private static File userFile=null;
    private static FileManager fileMan = new FileManager();
    
    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnSelectDir = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        fieldFileName = new javax.swing.JTextField();
        btnCreateFile = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnSelectFile = new javax.swing.JButton();
        btnModifyBeginning = new javax.swing.JButton();
        btnModifyEnding = new javax.swing.JButton();
        fieldFilePath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("Area de trabajo:");

        tArea.setColumns(20);
        tArea.setRows(5);
        jScrollPane1.setViewportView(tArea);

        jLabel2.setText("多Que quiere hacer con el texto introducido?");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setText("Crear fichero:");

        jLabel4.setText("Ubicacion del fichero:");

        btnSelectDir.setText("Seleccionar carpeta");
        btnSelectDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDirActionPerformed(evt);
            }
        });

        jLabel5.setText("Nombrar fichero:");

        fieldFileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldFileNameKeyReleased(evt);
            }
        });

        btnCreateFile.setText("Crear");
        btnCreateFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFileActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel6.setText("A単adir a fichero existente:");

        btnSelectFile.setText("Seleccionar fichero");
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        btnModifyBeginning.setText("A単adir al principio");
        btnModifyBeginning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyBeginningActionPerformed(evt);
            }
        });

        btnModifyEnding.setText("A単adir al final");
        btnModifyEnding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyEndingActionPerformed(evt);
            }
        });

        fieldFilePath.setEditable(false);
        fieldFilePath.setText("No seleccionado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 177, Short.MAX_VALUE))
                            .addComponent(fieldFilePath)))
                    .addComponent(btnSelectFile)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSelectDir, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateFile))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnModifyBeginning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModifyEnding)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSelectDir)
                            .addComponent(jLabel5)
                            .addComponent(fieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreateFile))
                        .addGap(42, 42, 42)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModifyBeginning)
                            .addComponent(btnModifyEnding)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Funcion que se equecuta al tocar el boton btnSelectDir. Lanza un selector
     * de  directorios y muestra por pantalla  el directorio seleccionado 
     * @param evt 
     */
    private void btnSelectDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDirActionPerformed
        //lanzamos el selector de directorio
        chooseFileLocation(JFileChooser.DIRECTORIES_ONLY,
                "Elija carpeta para su nuevo archivo:");
        //actualizamos la info
        updateFieldFilePath();
    }//GEN-LAST:event_btnSelectDirActionPerformed

    /**
     * Funcion que se ejecuta al tocar el boton btnCreateFile. Controla todos 
     * los errores de usuario y en tiempo de ejecucion. Luego intenta crear el 
     * directorio vacio y si todo ha ido vien intenta escribir el texto del 
     * usuario.
     * @param evt 
     */
    private void btnCreateFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFileActionPerformed
        String userText = tArea.getText();
        String fileName = fieldFileName.getText();
        File finalFile = null;
        if (validateFileCreationViewParameters(fileName, userText)) {
            finalFile= new File(userFile, fileName+".txt");
            if (!finalFile.exists()) {//controlar que el archivo elegido no exista 
                //crear el archivo 
                if (fileMan.createFile(finalFile)) {
                    //escribir el texto
                    if (fileMan.apendText(finalFile, userText)) {
                        msg("Archivo creado correctamente");
                        
                        //reiniciamos el directorio seleccionado por el usuario
                        userFile=null;
                        updateFieldFilePath();
                    }else{
                        msgError("Archivo creado. Error durante la escritura");
                    }
                }else{
                    msgError("Error durante la creacion");
                }
            }else{
                    msgError("El archivo introducido ya existe");
                }
                
        }
        
    }//GEN-LAST:event_btnCreateFileActionPerformed

    /**
     * Funcion que se ejecuta al tocar el boton btnSelectFile. Lanza un selector
     * de  archivos y muestra por pantalla  el directorio seleccionado
     * @param evt 
     */
    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
        //lanzamos el selector de archivo
        chooseFileLocation(JFileChooser.FILES_ONLY, "Elija archivo para editar:");
        //actualizamos la info
        updateFieldFilePath();
    }//GEN-LAST:event_btnSelectFileActionPerformed

    /**
     * Funcion que se ejecuta al tocar el boton btnModifyBeginning. Valida los 
     * parametros introducidos por el usuario e intenta a単adir informacion al 
     * inicio archivo del usuario. Responde el con resultado de la operacion
     * @param evt 
     */
    private void btnModifyBeginningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyBeginningActionPerformed
        String userText = tArea.getText();//obtenemos el texto del usuario
        //validamos los parametros introducidos por el usuario
        if (validateFileEditionViewParameters(userText)) {
            //intentamos a単adir el texto al inicio
            if (fileMan.addBeginningText(userFile, userText)) {//si todo ok
                msg("El archivo se ha editado correctamente"); //msg ok
            }else{//si falla
                msgError("Error durante la edicion");
            }
        }
    }//GEN-LAST:event_btnModifyBeginningActionPerformed

    /**
     * Funcion que se ejecuta al tocar el boton btnModifyEnding. Valida los 
     * parametros introducidos por el usuario e intenta a単adir informacion al 
     * final archivo del usuario. Responde el con resultado de la operacion
     * @param evt 
     */
    private void btnModifyEndingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyEndingActionPerformed
        String userText = tArea.getText();//obtenemos el texto del usuario
        //validamos los parametros introducidos por el usuario
        if (validateFileEditionViewParameters(userText)) {
            //intentamos a単adir el texto al final
            if (!fileMan.apendText(userFile, userText)) {//si todo ok
                msg("El archivo se ha editado correctamente"); //msg ok
            }else{
                msgError("Error durante la edicion");
            }
        }
    }//GEN-LAST:event_btnModifyEndingActionPerformed

    /**
     * Funcion que se ejecuta al editar el textField fieldFileName. Esta 
     * funcion actualiza el fieldFilePath para que el usuario pueda ver el 
     * resultado de la ruta completa del archivo que va a crear. Funciona solo 
     * cuando previamente se ha seleccionado un directorio de creacion de 
     * archivo
     * @param evt 
     */
    private void fieldFileNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldFileNameKeyReleased
        if (userFile!=null && userFile.isDirectory()) {
            fieldFilePath.setText(userFile.getAbsolutePath()
                    +"\\"+fieldFileName.getText()+".txt");
        }
    }//GEN-LAST:event_fieldFileNameKeyReleased

    /**
     * Funcion auxiliar que actualiza la informacion del File seleccionado por 
     * el usuario
     */
    private void updateFieldFilePath()
    {
        if (userFile != null) {
            fieldFilePath.setText(userFile.getAbsolutePath());
        }else{
            fieldFilePath.setText("No seleccionado");
        }
    }
    
    /**
     * Funcion auxiliar que valida los datos de edicion elegidos por el usuario
     * en el momente de ejecutar la edicion de un file. Controla que el archivo 
     * elegido sea editable, que el archivo elegido sea un archivo y que haya 
     * algun texto que a単adir al archivo
     * Muestra los errores por pantalla
     * @param userText. Texto que el usuario quiere introducir al file
     * @return true si los datos son validos. False en caso negativo
     */
    private boolean validateFileEditionViewParameters(String userText){
        boolean res=false;
        if (userText.length()>0) {//que haya algun texto que introducir al archivo
            if (userFile!=null && userFile.isFile()) {//que el archivo sea un archivo
                if (userFile.canWrite()) {//que el archivo elegido sea editable
                    res=true;
                }else{
                    msgError("El archivo introducido no puede ser editado");
                }
            }else{
                msgError("No se ha elegido un archivo valido");
            }
        }else{
            msgError("No se ha introducido texto en el area de trabajo");
        }
        return res;
    }
    
    /**
     * Funcion auxiliar que valida los datos de creacion elegidos por el usuario
     * en el momente de ejecutar la creacion de un file. Controla que haya texto
     * que introducir al nuevo archivo, que se haya elegido un directorio para 
     * crear el archivo, que se haya elegido nombre para el nuevo archivo. 
     * Muestra los errores por pantalla
     * @param fileName nombre del archivo que el ususario quiere crear
     * @param userText Texto que el usuario quiere introducir al file
     * @return true si los datos son validos. False en caso negativo
     */
    private boolean validateFileCreationViewParameters(String fileName,
            String userText){
        boolean res=false;
        if (userText.length()>0) {
            if (userFile!=null && userFile.isDirectory()) {
                if (fileName.length()>0) {
                    res=true;
                }else{
                    msgError("No se ha introducido nombre para el nuevo archivo");
                }
            }else{
                msgError("No se ha elegido un directorio valido");
            }
        }else{
            msgError("No se ha introducido texto en el area de trabajo");
        }
        return res;
    }
    
    /**
     * Funcion auxiliar que muestra por pantalla un selector de archivos.
     * @param mode tipo de archivos que se ofreceran:
     * JFileChooser.FILES_ONLY; 
     * qJFileChooser.DIRECTORIES_ONLY;
     * JFileChooser.FILES_AND_DIRECTORIES. 
     * @param msg mensaje del selector de archivos
     */
    private void chooseFileLocation(int mode,String msg)
    {
        JFileChooser fileCh=new JFileChooser(); //inicializamos el filechooser
        
        fileCh.setFileSelectionMode(mode); //filtramos lo que se puede elegir
        
        //ponemos bonito el filechooser
        fileCh.setDialogTitle(msg);
        
        //lanzamos el filechooser
        if(fileCh.showDialog(this, "Aceptar")==JFileChooser.APPROVE_OPTION){
            //si se ha pulsado el boton de aceptar, recogemos la seleccion
            userFile= fileCh.getSelectedFile();
        }
    }
    
    /**
     * Funcion auxiliar que muestra por pantalla un mensaje de error a trav辿s de
     * un JOptionPane
     * @param msg mensaje de error
     */
    private void msgError(String msg){
        JOptionPane.showMessageDialog(this, msg, "Error", 
                            JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Funcion auxiliar que muestra por pantalla un mensaje a trav辿s de un 
     * JOptionPane
     * @param msg mensaje 
     */
    private void msg(String msg){
        JOptionPane.showMessageDialog(this, msg, "Info", 
                            JOptionPane.INFORMATION_MESSAGE);
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateFile;
    private javax.swing.JButton btnModifyBeginning;
    private javax.swing.JButton btnModifyEnding;
    private javax.swing.JButton btnSelectDir;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JTextField fieldFileName;
    private javax.swing.JTextField fieldFilePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea tArea;
    // End of variables declaration//GEN-END:variables
}
